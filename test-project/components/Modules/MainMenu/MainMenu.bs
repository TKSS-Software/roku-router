import "pkg:/source/roku_modules/rodash/rodash.brs"
import "pkg:/source/roku_modules/promises/promises.brs"

sub init()
    m.top.update({
        width: 1920
        height: 1080
        color: "#00000099"
    })
    m.inFocusChain = false
    m.focusedButton = m.showsButton
    m.top.observeField("focusedChild", "onFocusChildChanged")
    m.top.observeField("visible", "handleVisibilityChange")
    handleVisibilityChange()
end sub

sub initialize(_ = Invalid as Dynamic)
    for each button in rodash.getNodeChildren(m.buttonGroup)
        button.router = m.top.router
    end for

    m.global.AuthManager.observeField("isLoggedIn", "checkLoggedInState")
    checkLoggedInState()
    onUnfocusState()
end sub

sub handleVisibilityChange(_ = Invalid as Dynamic)
    m.top.focusable = m.top.visible
end sub

sub onFocusChildChanged(event as Object)
    inFocusChain = event.getData() <> Invalid

    if NOT m.inFocusChain AND inFocusChain then
        m.inFocusChain = true
        onFocusState()
        m.focusedButton.setFocus(true)
    else if m.inFocusChain AND NOT inFocusChain then
        m.inFocusChain = false
        onUnfocusState()
    end if
end sub

sub onFocusState()
    m.top.update({
        clippingRect: [0, 0, 1920, 1080]
    })
end sub

sub onUnfocusState()
    m.top.update({
        clippingRect: [0, 0, 120, 1080]
    })
end sub

sub checkLoggedInState()
    ' if m.global.AuthManager.isLoggedIn then
    '     m.label.text = "User is logged in"
    ' else
    '     m.label.text = "User is not logged in"
    ' end if
end sub

function onKeyEvent(key = "" as String, press = false as Boolean) as Boolean
    if press then
        if key = "up" OR key = "down" then
            buttons = rodash.getNodeChildren(m.buttonGroup)
            index = rodash.indexOf(buttons, m.focusedButton)
            if key = "up" then
                index = index - 1
            else
                index = index + 1
            end if
            nextButton = buttons[index]
            if nextButton <> Invalid then
                m.focusedButton = nextButton
                nextButton.setFocus(true)
                return true
            end if
        else if key = "back" then
            return m.top.router@.setFocus(true)
        end if
    end if

    return false
end function