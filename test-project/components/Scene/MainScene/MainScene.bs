import "pkg:/source/router.bs"

sub init()
    m.router = m.top.findNode("router")
    m.loadingOverlay = m.top.findNode("loadingOverlay")
    m.loadingOverlayText = m.loadingOverlay.findNode("loadingOverlayText")
    m.mainMenu = m.top.findNode("mainMenu")

    m.top.backgroundColor = "#000000"
    m.top.backgroundUri = ""

    m.global.addFields({
        "AuthManager": createObject("roSGNode", "AuthManager")
    })

    m.global.AuthManager.observeField("isLoggedIn", "onAuthManagerIsLoggedInChanged")

    m.mainMenu.router = m.router
    m.mainMenu@.initialize()

    m.router.observeField("routerState", "onRouterStateChanged")
    m.router@.addRoutes([
        { pattern: "/", component: "WelcomeScreen", isRoot: true },
        { pattern: "/shows", component: "CatalogScreen", isRoot: true, canActivate: [m.global.AuthManager] },
        { pattern: "/movies", component: "CatalogScreen", isRoot: true, keepRootAlive: true, canActivate: [m.global.AuthManager] },
        { pattern: "/details/:type/:id", component: "DetailsScreen", canActivate: [m.global.AuthManager] },
        { pattern: "/details/:type/:id/cast", component: "CastDetailsScreen", canActivate: [m.global.AuthManager] },
        { pattern: "/:screenName", component: "DefaultScreen" }
    ])

    ' Read the sample data from the file. You normally wouldn't want to do this in a real app.
    m.global.update(ParseJSON(ReadAsciiFile("pkg:/assets/sampleData.json")), true)
    rokuRouter.navigateTo("/#firstLoad=true", {}, {}, m.router)

    m.router@.setFocus(true)
end sub

sub onAuthManagerIsLoggedInChanged(event as Object)
    if event.getData() then
        rokuRouter.navigateTo("/shows", {}, {}, m.router)
    else
        rokuRouter.navigateTo("/", {}, {}, m.router)
    end if
end sub

sub onRouterStateChanged(event as Object)
    data = event.getData()
    print "onRouterStateChanged: ", data

    if data.type = "NavigationEnd" then
        m.mainMenu.visible = data.route.routeConfig.isRoot AND m.global.AuthManager.isLoggedIn
        m.loadingOverlay.visible = false
    else if data.type = "NavigationStart" then
        m.loadingOverlay.visible = true
    else if data.type = "NavigationError" OR data.type = "NavigationCancel" then
        m.loadingOverlay.visible = false
    end if
end sub

function onKeyEvent(key = "" as String, press = false as Boolean) as Boolean
    if press then
        if key = "back" OR key = "left" then
            if m.mainMenu.visible then m.mainMenu.setFocus(true)
            return true
        else if key = "right" then
            if NOT m.router@.setFocus(true) then
                if m.mainMenu.visible then m.mainMenu.setFocus(true)
            end if
            return true
        end if
    end if

    return true
end function