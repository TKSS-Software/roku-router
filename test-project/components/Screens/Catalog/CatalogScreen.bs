import "../../../source/roku_modules/rodash/rodash.brs"
import "../../../source/common.bs"

sub init()
  m.pageType = ""
  m.label = m.top.findNode("label")
  m.rowList = m.top.findNode("rowList")
  m.rowList.observeField("rowItemSelected", "onItemSelected")
end sub

function beforeViewOpen(params = {} as Object) as Dynamic
  api = { data: { carousels: [] } }
  title = ""
  m.pageType = rodash.getString(params, "route.routeConfig.pattern") = "/shows" ? "shows": "movies"
  if m.pageType = "shows" then
    title = "Shows"
    genres = util.getGenreNamesForType("shows")
    for each genre in genres
      api.data.carousels.push(util.getCarouselByGenre(genre, "series"))
    end for
  else if m.pageType = "movies" then
    title = "Movies"
    genres = util.getGenreNamesForType("movies")
    for each genre in genres
      api.data.carousels.push(util.getCarouselByGenre(genre, "movie"))
    end for
  end if

  m.label.text = title

  rowListContent = rodash.createNode("ContentNode")
  if rodash.isNonEmptyAA(api) then
    for each carousel in api["data"]["carousels"]
      if rodash.isNonEmptyArray(carousel["items"]) then
        row = rodash.createNode("ContentNode", {
          "title": carousel["title"],
        })
        for each item in carousel["items"]
          content = rodash.createNode("ContentNode", item)
          row.appendChild(content)
        end for
        rowListContent.appendChild(row)
      end if
    end for
  end if
  m.rowList.itemComponentName = "CatalogScreenItem"
  m.rowList.itemSize = [1800, 440]
  m.rowList.rowItemSize = [[220, 330]]
  m.rowList.rowLabelOffset = [0, 20]
  m.rowList.showRowLabel = [true]
  m.rowList.numRows = 3
  m.rowList.rowItemSpacing = [20, 20]
  m.rowList.content = rowListContent

  return promises.resolve(Invalid)
end function

function onViewResume(params = {} as Object) as Dynamic
  ' If we are coming from a suspended root, jump to the first item
  fromSuspendedRoot = params.route.context.fromSuspendedRoot
  if fromSuspendedRoot <> Invalid AND fromSuspendedRoot then
    m.rowList.jumpToRowItem = [0, 0]
  end if

  return promises.resolve(Invalid)
end function

sub onItemSelected(event as Object)
  itemSelected = event.getRoSGNode().content.getChild(event.getData()[0]).getChild(event.getData()[1])
  contentType = "series"
  if m.pageType = "movies" then contentType = "movie"

  path = `/details/${contentType}/${itemSelected.id}`
  print "path", path
  Router.navigateTo(path)
end sub

function handleFocus(data as Object) as Boolean
  if data.routerFocused then
    return m.rowList.setFocus(true)
  end if

  return false
end function
