import "pkg:/source/common.bs"

sub init()
    m.rowList.observeField("rowItemSelected", "onItemSelected")
end sub

sub onItemSelected(event as Object)
    itemSelected = event.getRoSGNode().content.getChild(event.getData()[0]).getChild(event.getData()[1])
    path = `/details/${m.pageType}/${itemSelected.id}`
    m.top.router@.navigateTo(path, {}, {
        "name": itemSelected.name,
        "genres": itemSelected.genres,
        "rating": itemSelected.rating,
        "poster_path": itemSelected.poster_path,
        "backdrop_path": itemSelected.backdrop_path,
        "description": itemSelected.description
    })
end sub

function beforeScreenOpen(params = Invalid as Dynamic) as Dynamic
    print params.routeParams.type
    m.pageType = params.routeParams.type
    context = rodash.getAA(params, "context")
    textWidths = 1920 - (m.content.translation[0] * 2) - m.topSection.itemSpacings[0] - m.poster.width

    m.title.font = "font:MediumBoldSystemFont"
    m.title.width = textWidths
    m.title.text = rodash.getString(context, "name")

    m.description.text = rodash.getString(context, "description")
    m.description.width = textWidths

    m.rating.font = "font:SmallestSystemFont"
    m.rating.text = `Rating: ${rodash.getString(context, "rating")}`

    m.poster.uri = rodash.getString(context, "poster_path").replace("/original/", `/w${m.poster.width}_and_h${m.poster.height}_multi_faces/`)
    m.background.uri = rodash.getString(context, "backdrop_path").replace("/original/", `/w1920_and_h1080_multi_faces/`)

    api = { data: { carousels: [] } }
    api.data.carousels.push(util.getRelatedCarousel(context, m.pageType))

    rowListContent = rodash.createNode("ContentNode")
    if rodash.isNonEmptyAA(api) then
        for each carousel in api["data"]["carousels"]
            if rodash.isNonEmptyArray(carousel["items"]) then
                row = rodash.createNode("ContentNode", {
                    "title": carousel["title"],
                })
                for each item in carousel["items"]
                    content = rodash.createNode("ContentNode", item)
                    row.appendChild(content)
                end for
                rowListContent.appendChild(row)
            end if
        end for
    end if
    m.rowList.itemComponentName = "CatalogScreenItem"
    m.rowList.itemSize = [1800, 440]
    m.rowList.rowItemSize = [[220, 330]]
    m.rowList.rowLabelOffset = [0, 20]
    m.rowList.showRowLabel = [true]
    m.rowList.numRows = 3
    m.rowList.rowItemSpacing = [20, 20]
    m.rowList.content = rowListContent
    return promises.resolve(Invalid)
end function

function onScreenOpen(params = Invalid as Dynamic) as Dynamic
    m.rowList.setFocus(true)
    return promises.resolve(Invalid)
end function
