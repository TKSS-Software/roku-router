import "pkg:/source/roku_modules/promises/promises.brs"
import "pkg:/source/roku_modules/rodash/rodash.brs"
import "pkg:/source/router.bs"

sub init()
    m.top.focusable = true
    m.top.observeField("focusedChild", "onFocusChildChanged")

    m.activeView = Invalid
    m.routes = {}
    m.guardInstances = {}

    m.focusRequestMade = false
    m.processingGoBack = false

    m.top.appLaunchComplete = false
end sub

sub onFocusChildChanged(event as Object)
    inFocusChain = event.getData() <> Invalid

    if NOT m.processingGoBack AND m.activeView <> Invalid AND NOT inFocusChain AND m.focusRequestMade <> inFocusChain then
        m.focusRequestMade = inFocusChain
        m.activeView@._handleFocus({
            routerFocused: inFocusChain
        })
    end if

    m.focusRequestMade = inFocusChain
end sub

function setFocus(takeFocus as Boolean) as Boolean
    ' print source_function_name, takeFocus
    response = false

    if m.activeView <> Invalid AND takeFocus AND m.focusRequestMade <> takeFocus then
        response = m.activeView@._handleFocus({
            routerFocused: true
        })
    end if

    m.focusRequestMade = true

    return response
end function

sub addRoutes(routes = [] as Object)
    for each route in routes
        m.routes[route.pattern] = route
    end for
end sub

' Function to get the routes
function getRoutes(_ = Invalid as Dynamic) as Dynamic
    return m.routes
end function

' Function to navigate back in the router history
function goBack(_ = Invalid as Dynamic) as Dynamic
    m.processingGoBack = true
    views = rodash.getNodeChildren(m.viewTarget)
    numberOfViews = views.count()
    if numberOfViews <= 1 then return false

    promises.chain(closeView(views.pop()), views.peek()).then(sub(response as Dynamic, view as Dynamic)
        m.focusRequestMade = m.focusRequestMade OR m.processingGoBack
        view.route.context = rodash.merge(view.route.context, {
            fromSuspendedRoot: false
            fromPopState: true
            fromPushState: false
            fromRedirect: false
        })
        showView(view, true)
    end sub)

    return true
end function

sub dispatchRouterState(stateType as String, context = {} as Dynamic)
    update = {
        type: stateType
        id: rodash.getString(context, "route.id", context.id)
        route: rodash.get(context, "route")
    }

    if stateType = RouterState.GuardResult then
        update.result = rodash.get(context, "result")
    end if
    m.top.routerState = update
end sub

' Function to navigate to a specific route
function navigateTo(path = "" as String, routeConfigOverrides = {} as Object, context = {} as Object) as Dynamic
    newRoute = rodash.createNode("Node", findMatchingRoute(path, m.routes))
    newRoute.context = rodash.merge(newRoute.context, context)

    if rodash.isNonEmptyAA(routeConfigOverrides) then
        newRouteConfig = rodash.merge(newRoute.routeConfig, routeConfigOverrides)
        newRoute.routeConfig = newRouteConfig
    end if

    'dispatch the event
    dispatchRouterState(RouterState.NavigationStart, {
        id: newRoute.id
        route: newRoute
    })

    'sleep until next tick, then continue work
    return promises.chain(runGuardChecks(newRoute), { newRoute: newRoute }).then(function(guardCheckResponse as Dynamic, internalContext as Dynamic) as Dynamic
        if NOT guardCheckResponse.allow then
            if guardCheckResponse.redirect <> Invalid then
                return guardCheckResponse.redirect
            end if

            promises.reject(guardCheckResponse)
        end if

        id = internalContext.newRoute.id
        newRoute = internalContext.newRoute

        if rodash.isNonEmptyAA(newRoute.routeConfig) then
            if rodash.isEmptyString(rodash.getString(newRoute, "routeConfig.component")) then
                return promises.reject({ message: `No component for route "${newRoute.path}"` })
            end if

            viewsToRemove = []
            if m.activeView <> Invalid then
                oldRoute = m.activeView.route

                ' Reuse the view and call onRouteUpdate if the path or hash is the same, OR if the routeConfig override allows it
                hasHash = rodash.isNonEmptyString(newRoute.hash)
                isSamePath = rodash.isEqual(newRoute.path, oldRoute.path)
                reuse = rodash.getBoolean(newRoute.routeConfig, "allowReuse") OR hasHash OR isSamePath
                if hasHash then
                    if NOT rodash.isEqual(newRoute.routeConfig, oldRoute.routeConfig) then reuse = false
                else
                    if NOT rodash.isEqual(newRoute.routeParams.component, oldRoute.routeParams.component) then reuse = false
                end if

                if reuse then
                    m.activeView.route = newRoute
                    m.activeView@._onRouteUpdate({
                        oldRoute: oldRoute
                        newRoute: newRoute
                    })
                    dispatchRouterState(RouterState.NavigationEnd, {
                        id: id
                        route: newRoute
                    })
                    return promises.resolve(m.activeView)
                else
                    if newRoute.routeConfig.isRoot then
                        for each view in rodash.getNodeChildren(m.viewTarget)
                            ' print "view to remove", view
                            viewsToRemove.push(view)
                        end for
                    end if
                end if
            end if

            newRoute.context = rodash.merge(newRoute.context, {
                fromPopState: false
                fromPushState: true
            })

            return addViewToStack(newRoute, viewsToRemove)
        end if

        dispatchRouterState(RouterState.NavigationError, {
            id: id
        })
        message = { message: `Route "${newRoute.path}" not found` }
        print message
        return promises.reject(message)
    end function).toPromise()
end function

function runGuardChecks(route as Dynamic) as Dynamic
    ' Run guard checks
    canActivateGuard = rodash.get(route.routeConfig, "canActivate")
    dispatchRouterState(RouterState.GuardsCheckStart, {
        id: route.id
        route: route
    })
    if rodash.isNonEmptyArray(canActivateGuard) then
        for each guard in canActivateGuard
            guardNode = Invalid
            if rodash.isNode(guard) then
                guardNode = guard
            else if rodash.isString(guard) then
                if m.guardInstances[guard] = Invalid then
                    m.guardInstances[guard] = rodash.createNode(guard)
                end if

                guardNode = m.guardInstances[guard]
            end if

            if guardNode <> Invalid then
                canActivateResult = guardNode@.canActivate(route)
                ' print "canActivateResult", canActivateResult
                dispatchRouterState(RouterState.GuardResult, {
                    id: route.id
                    route: route
                    type: "canActivate"
                    result: canActivateResult
                })

                if rodash.isBoolean(canActivateResult) then
                    canActivate = canActivateResult

                    if NOT canActivate then
                        message = { allow: false, message: `Route "${route.path}" is not accessible` }
                        dispatchRouterState(RouterState.GuardsCheckEnd, {
                            id: route.id
                            route: route
                        })
                        return promises.resolve(message)
                    end if
                else if rodash.isNonEmptyAA(canActivateResult) then
                    redirectTo = rodash.getString(canActivateResult, "path")
                    if rodash.isNonEmptyString(redirectTo) then
                        dispatchRouterState(RouterState.GuardsCheckEnd, {
                            id: route.id
                            route: route
                        })
                        dispatchRouterState(RouterState.NavigationCancel, {
                            id: route.id
                            route: route
                        })
                        context = rodash.merge({}, [route.context, rodash.getAA(canActivateResult, "context"), { fromRedirect: true }])
                        return promises.resolve({ allow: false, redirect: navigateTo(redirectTo, rodash.getAA(canActivateResult, "routeConfigOverrides"), context) })
                    end if
                else
                    message = { allow: false, message: `Invalid Route Guard on "${route.path}"` }
                    return promises.resolve(message)
                end if
            end if
        end for
    end if

    dispatchRouterState(RouterState.GuardsCheckEnd, {
        id: route.id
        route: route
    })
    return promises.resolve({ allow: true })
end function

function addViewToStack(route as Dynamic, closeViews = [] as Object) as Dynamic
    ' Look to see if the root view is suspended
    suspendedRootView = Invalid
    for each view in rodash.getNodeChildren(m.suspendedRootTarget)
        ' print "view.route.pattern", view.route.path, route.path
        if view.route.path = route.path then
            suspendedRootView = view

            route.context = rodash.merge(route.context, {
                fromSuspendedRoot: true
            })
            exit for
        end if
    end for

    toResolve = Invalid
    if suspendedRootView <> Invalid then
        view = suspendedRootView
        view.id = route.id
        view.route = route
        toResolve = promises.resolve(Invalid)
    else
        componentName = rodash.getString(route, "routeConfig.component")

        ' Create the view and hide it to prevent using texture memory until it is ready to be shown
        view = rodash.createNode(componentName, {
            visible: false
            translation: [10000, 10000]
            id: route.id
            route: route
            router: m.top
        })

        if view = Invalid then
            return promises.reject({ message: `Failed to create view "${componentName}"` })
        end if

        toResolve = view@._beforeViewOpen({ route: route })
    end if

    return promises.chain(toResolve, { view: view, closeViews: closeViews, fromSuspend: suspendedRootView <> Invalid }).then(function(response as Dynamic, internalContext as Dynamic) as Dynamic
        view = internalContext.view
        m.viewTarget.appendChild(view)
        view.reparent(m.viewTarget, true) ' in the event the view was previously suspended
        hideView(m.activeView)

        promisesToResolve = []
        if rodash.isNonEmptyArray(internalContext.closeViews) then
            for each view in internalContext.closeViews
                params = {
                    route: view.route
                }
                if view.route.routeConfig.isRoot AND view.route.routeConfig.keepRootAlive then
                    promisesToResolve.push(view@._onViewSuspend(params))
                else
                    promisesToResolve.push(view@._beforeViewClose(params))
                end if
            end for
        end if

        return promises.all(promisesToResolve)
    end function).then(function(_ as Dynamic, internalContext as Dynamic) as Dynamic
        'now that all of the `beforeViewClose` promises have resolved, show the new view
        return showView(internalContext.view, internalContext.fromSuspend)
    end function).then(function(response as Dynamic, internalContext as Dynamic) as Dynamic
        if rodash.isNonEmptyArray(internalContext.closeViews) then
            for each view in internalContext.closeViews
                if view.route.routeConfig.isRoot AND view.route.routeConfig.keepRootAlive then
                    if hideView(view) AND view.reparent(m.suspendedRootTarget, true) then
                        m.suspendedRootTarget.appendChild(view)
                    end if
                else
                    if hideView(view) then rodash.removeNode(view)
                end if
            end for
        end if
        return response
    end function).catch(function(error as Dynamic) as Dynamic
        return promises.reject(error)
    end function).toPromise()
end function


' Helper function to find a matching route
function findMatchingRoute(path as String, routes as Object) as RouteObject
    hash = Router._utils.getHashParam(path)

    if rodash.isNonEmptyString(hash) then
        path = path.replace("#" + hash, "")
    end if

    ' Separate the path from the query string
    pathParts = path.split("?")
    basePath = normalizePath(pathParts[0])
    queryString = Invalid
    if pathParts.count() > 1 then
        queryString = pathParts[1]
    end if

    ' Parse the query string if present
    queryParams = parseQueryString(queryString)

    context = {
        fromRedirect: false
        fromSuspendedRoot: false
        fromPopState: false
        fromPushState: false
    }

    ' First check for exact matches (static paths)
    for each routePath in routes
        if normalizePath(routePath) = basePath then
            routeConfig = routes[routePath]
            ' Backfill routeConfig with default values
            routeConfig.allowReuse = rodash.getBoolean(routeConfig, "allowReuse")
            routeConfig.canActivate = rodash.getArray(routeConfig, "canActivate")
            routeConfig.isRoot = rodash.getBoolean(routeConfig, "isRoot")
            routeConfig.keepRootAlive = rodash.getBoolean(routeConfig, "keepRootAlive")
            routeConfig.isDialog = rodash.getBoolean(routeConfig, "isDialog")

            return {
                context: context
                path: path
                routeConfig: routeConfig
                routeParams: {}
                queryParams: queryParams
                hash: hash
                id: CreateObject("roDeviceInfo").GetRandomUUID()
                router: m.top
            }
        end if
    end for

    ' Then check parameterized matches
    for each routePath in routes
        routeParts = normalizePath(routePath).split("/")
        pathParts = basePath.split("/")

        matchedParams = {}
        if routeParts.count() = pathParts.count() then
            matchedParams = {}
            isMatch = true

            for i = 0 to routeParts.count() - 1
                if routeParts[i].left(1) = ":" then
                    ' This is a parameter
                    paramName = routeParts[i].mid(1)
                    matchedParams[paramName] = pathParts[i]
                else if routeParts[i] <> pathParts[i] then
                    ' If a static part doesn't match, break
                    isMatch = false
                    exit for
                end if
            end for

            if isMatch then
                routeConfig = routes[routePath]
                ' Backfill routeConfig with default values
                routeConfig.allowReuse = rodash.getBoolean(routeConfig, "allowReuse")
                routeConfig.canActivate = rodash.getArray(routeConfig, "canActivate")
                routeConfig.isRoot = rodash.getBoolean(routeConfig, "isRoot")
                routeConfig.keepRootAlive = rodash.getBoolean(routeConfig, "keepRootAlive")
                routeConfig.isDialog = rodash.getBoolean(routeConfig, "isDialog")

                return {
                    context: context
                    path: path
                    routeConfig: routeConfig
                    routeParams: matchedParams
                    queryParams: queryParams
                    hash: hash
                    id: CreateObject("roDeviceInfo").GetRandomUUID()
                    router: m.top
                }
            end if
        end if
    end for

    ' Return Route with empty routeConfig if no match found
    return {
        context: context
        path: path
        routeConfig: {}
        routeParams: {}
        queryParams: queryParams
        hash: hash
        id: CreateObject("roDeviceInfo").GetRandomUUID()
        router: m.top
    }
end function

' Helper function to normalize a path
function normalizePath(path as String) as String
    path = path.trim()
    if path.right(1) = "/" then
        path = path.left(path.len() - 1)
    end if
    if path.left(1) <> "/" then
        path = "/" + path
    end if
    return path
end function

' Helper function to parse a query string into an associative array
function parseQueryString(queryString as Dynamic) as Object
    if NOT rodash.isNonEmptyString(queryString) then
        return {}
    end if

    queryParams = {}
    pairs = queryString.split("&")
    for each pair in pairs
        keyValue = pair.split("=")
        if keyValue.count() = 2 then
            key = keyValue[0]
            value = keyValue[1]
            queryParams[key] = value
        end if
    end for
    return queryParams
end function

function hideView(view as Object, onSuspend = false as Boolean) as Boolean
    success = rodash.isNode(view)
    if success then
        view.visible = false
        view.translation = [10000, 10000]

        if onSuspend then
            view@._onViewSuspend({ route: view.route })
        end if
    end if
    return success
end function

' Tells the view to open and fire the handleFocus lifecycle method
function showView(view as Object, onResume = false as Boolean) as Dynamic
    if rodash.isNode(view) then
        view.visible = true
        view.translation = [0, 0]
        m.activeView = view

        response = Invalid
        params = {
            route: view.route
        }
        if onResume then
            response = view@._onViewResume(params)
        else
            response = view@._onViewOpen(params)
        end if

        return promises.chain(response, { response: response, view: view }).finally(function(context as Dynamic) as Dynamic
            ' print "View opened", m.focusRequestMade
            focusSuccess = context.view@._handleFocus({
                routerFocused: m.focusRequestMade
            })

            ' Return focus to the top node if the view didn't handle focus
            if m.focusRequestMade AND NOT focusSuccess then
                m.top.setFocus(true)
            end if

            m.processingGoBack = false
            dispatchRouterState(RouterState.NavigationEnd, {
                id: context.view.id
                route: context.view.route
            })
            return context.response
        end function).toPromise()
    end if

    return promises.reject({ message: "Invalid view" })
end function

function closeView(view = Invalid as Dynamic) as Dynamic
    view.translation = [1000000, 100000]
    view.visible = false

    return promises.onThen(view@._beforeViewClose({ route: view.route }), function(response as Dynamic, internalContext as Dynamic) as Dynamic
        if hideView(internalContext.view) then
            rodash.removeNode(internalContext.view)
        end if

        return true
    end function, { view: view })
end function

function onKeyEvent(key = "" as String, press = false as Boolean) as Boolean
    if NOT press then return true

    if key = "back" then
        return goBack()
    end if

    return false
end function
